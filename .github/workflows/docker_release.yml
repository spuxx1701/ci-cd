name: docker_release

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      username:
        description: "Your dockerhub username. Defaults to 'spuxx'."
        default: spuxx
        type: string
      repository:
        description: "The dockerhub repository. Defaults to the git repository name."
        default: ${{ github.event.repository.name }}
        type: string
      dockerfile:
        description: "The dockerfile path relative to the root folder. Defaults to 'Dockerfile'."
        default: Dockerfile
        type: string
      image_name:
        description: "The docker image. Will default to 'username/repository:tag'."
        default: ${{ inputs.username }}/${{ inputs.repository }}:${{ inputs.tag }}
        type: string
    secrets:
      token:
        description: "The dockerhub access token."
        required: true
    outputs:
      tags:
        description: "The dockerhub tags."
        value: ${{ jobs.docker_build_and_push.outputs.tags }}

jobs:
  docker_release:
    name: Docker build and release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Setup
        shell: bash
        run: |
          echo "This job will attempt to build and push image '${{ inputs.image }}' to Dockerhub."
      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.image_name }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to DockerHub
        uses: docker/login-action@v2  
        with:
          username: ${{ inputs.username }}
          password: ${{ secrets.token }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          file: ./${{ inputs.dockerfile }}
          tags: ${{ inputs.image_name }}
      - name: Finish
        shell: bash
        run: |
          echo "Image '${{ steps.meta.outputs.tags }}' successfully build and pushed to registry."
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
