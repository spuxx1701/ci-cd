name: Run tests (vitest)

on:
  workflow_call:
    inputs:
      PNPM_VERSION:
        description: 'The version of pnpm to use. Optional if packageManager is specified in package.json'
        type: string
        required: false
        default: ''
      PNPM_BUILD:
        description: "Whether to run pnpm -r build before running the tests"
        type: boolean
        required: false
        default: false
      TEST_COMMAND:
        description: "Command to run vitest tests."
        type: string
        required: false
        default: "test:vitest"
      COVERAGE_DISABLE:
        description: "Whether code coverage reporting should be disabled."
        type: boolean
        required: false
        default: false
      COVERAGE_FILENAME:
        description: "Filename of the code coverage report."
        type: string
        required: false
        default: "reports/vitest/coverage/cobertura-coverage.xml"
      COVERAGE_FAIL_BELOW:
        description: "Minimum code coverage required to pass in %."
        type: string
        required: false
        default: "95"

jobs:
  run_tests_vitest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.PNPM_VERSION }}

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build packages
      if: ${{ inputs.PNPM_BUILD }}
      run: pnpm -r build

    - name: Run tests (vitest)
      run: pnpm run ${{ inputs.TEST_COMMAND }}

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ${{ inputs.COVERAGE_FILENAME }}

    - name: Check code coverage
      if: ${{ !inputs.COVERAGE_DISABLE }}
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: ${{ inputs.COVERAGE_FILENAME }}
        fail_below_min: "true"
        thresholds: "${{inputs.COVERAGE_FAIL_BELOW}} 100"
        badge: true
        format: markdown
        output: both
